{
  "platform_name": "CodeMara",
  "version": "2.0",
  "questions": [
    {
      "question_id": "QMARA_001",
      "title": "Two Sum",
      "slug": "two-sum",
      "difficulty": "easy",
      "tags": ["Array", "Hash Table"],
      "content": {
        "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
        "examples": [
          {
            "input": "nums = [2,7,11,15], target = 9",
            "output": "[0,1]",
            "explanation": "Because nums[0] + nums[1] == 9, we return [0,1]."
          }
        ],
        "constraints": [
          "2 <= nums.length <= 10^4",
          "-10^9 <= nums[i] <= 10^9"
        ]
      },
      "code_templates": {
        "python": {
          "starter": "def twoSum(nums, target):",
          "main": "if __name__ == '__main__':\n    import json\n    nums = json.loads(input())\n    target = int(input())\n    print(json.dumps(twoSum(nums, target)))",
          "solution": "def twoSum(nums, target):\n    seen = {}\n    for i, num in enumerate(nums):\n        if target - num in seen:\n            return [seen[target-num], i]\n        seen[num] = i\n    return []"
        },
        "java": {
          "starter": "class Solution {\n    public int[] twoSum(int[] nums, int target) {",
          "main": "public class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int[] nums = Arrays.stream(sc.nextLine().split(\",\")).mapToInt(Integer::parseInt).toArray();\n        int target = sc.nextInt();\n        System.out.println(Arrays.toString(new Solution().twoSum(nums, target)));\n    }\n}",
          "solution": "Map<Integer, Integer> map = new HashMap<>();\nfor (int i = 0; i < nums.length; i++) {\n    int complement = target - nums[i];\n    if (map.containsKey(complement)) {\n        return new int[] { map.get(complement), i };\n    }\n    map.put(nums[i], i);\n}\nthrow new IllegalArgumentException(\"No solution\");"
        },
        "cpp": {
          "starter": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {",
          "main": "int main() {\n    string input;\n    getline(cin, input);\n    vector<int> nums;\n    stringstream ss(input);\n    int num;\n    while (ss >> num) nums.push_back(num);\n    int target; cin >> target;\n    Solution sol;\n    vector<int> res = sol.twoSum(nums, target);\n    for (int n : res) cout << n << \" \";\n    return 0;\n}",
          "solution": "unordered_map<int, int> seen;\nfor (int i = 0; i < nums.size(); ++i) {\n    int complement = target - nums[i];\n    if (seen.count(complement)) \n        return {seen[complement], i};\n    seen[nums[i]] = i;\n}\nreturn {};"
        },
        "c": {
          "starter": "int* twoSum(int* nums, int numsSize, int target, int* returnSize) {",
          "main": "int main() {\n    int nums[10000], n = 0, target;\n    while (scanf(\"%d\", &nums[n++]) == 1);\n    n--; target = nums[--n];\n    int returnSize;\n    int* res = twoSum(nums, n, target, &returnSize);\n    for (int i = 0; i < returnSize; i++) printf(\"%d \", res[i]);\n    free(res);\n    return 0;\n}",
          "solution": "for (int i = 0; i < numsSize; i++) {\n    for (int j = i + 1; j < numsSize; j++) {\n        if (nums[i] + nums[j] == target) {\n            int* result = malloc(2 * sizeof(int));\n            result[0] = i; result[1] = j;\n            *returnSize = 2;\n            return result;\n        }\n    }\n}\n*returnSize = 0;\nreturn NULL;"
        }
      },
      "test_case_groups": [
        {
          "group_id": "BASIC",
          "test_cases": [
            {
              "input": "[2,7,11,15]\n9",
              "expected_output": "[0,1]",
              "is_hidden": false,
              "time_limit": 1000
            },
            {
              "input": "[3,2,4]\n6",
              "expected_output": "[1,2]",
              "is_hidden": false,
              "time_limit": 1000
            }
          ]
        },
        {
          "group_id": "EDGE",
          "test_cases": [
            {
              "input": "[3,3]\n6",
              "expected_output": "[0,1]",
              "is_hidden": true,
              "time_limit": 1000
            },
            {
              "input": "[-1,-2,-3,-4,-5]\n-8",
              "expected_output": "[2,4]",
              "is_hidden": true,
              "time_limit": 1500
            }
          ]
        },
        {
          "group_id": "PERF",
          "test_cases": [
            {
              "input": "[0,1,2,3,...,9999]\n19997",
              "expected_output": "[9998,9999]",
              "is_hidden": true,
              "time_limit": 2000,
              "note": "10,000 elements"
            }
          ]
        }
      ]
    },
    {
      "question_id": "QMARA_002",
      "title": "Reverse Linked List",
      "slug": "reverse-linked-list",
      "difficulty": "easy",
      "tags": ["Linked List", "Recursion"],
      "content": {
        "description": "Reverse a singly linked list.",
        "examples": [
          {
            "input": "[1,2,3,4,5]",
            "output": "[5,4,3,2,1]",
            "explanation": "The list is reversed"
          }
        ],
        "constraints": [
          "Number of nodes <= 5000"
        ]
      },
      "code_templates": {
        "python": {
          "starter": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverseList(head):",
          "main": "def build_list(arr):\n    dummy = ListNode()\n    curr = dummy\n    for num in arr:\n        curr.next = ListNode(num)\n        curr = curr.next\n    return dummy.next\n\ndef print_list(head):\n    res = []\n    while head:\n        res.append(head.val)\n        head = head.next\n    print(res)\n\nif __name__ == '__main__':\n    import json\n    arr = json.loads(input())\n    head = build_list(arr)\n    print_list(reverseList(head))",
          "solution": "prev = None\ncurr = head\nwhile curr:\n    next_node = curr.next\n    curr.next = prev\n    prev = curr\n    curr = next_node\nreturn prev"
        },
        "java": {
          "starter": "class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n}\n\nclass Solution {\n    public ListNode reverseList(ListNode head) {",
          "main": "public static ListNode buildList(int[] arr) {\n    ListNode dummy = new ListNode();\n    ListNode curr = dummy;\n    for (int num : arr) {\n        curr.next = new ListNode(num);\n        curr = curr.next;\n    }\n    return dummy.next;\n}\n\npublic static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int[] arr = Arrays.stream(sc.nextLine().split(\",\")).mapToInt(Integer::parseInt).toArray();\n    ListNode head = buildList(arr);\n    head = new Solution().reverseList(head);\n    while (head != null) {\n        System.out.print(head.val + \" \");\n        head = head.next;\n    }\n}",
          "solution": "ListNode prev = null;\nListNode curr = head;\nwhile (curr != null) {\n    ListNode next = curr.next;\n    curr.next = prev;\n    prev = curr;\n    curr = next;\n}\nreturn prev;"
        }
      },
      "test_case_groups": [
        {
          "group_id": "SINGLE_NODE",
          "test_cases": [
            {
              "input": "[1]",
              "expected_output": "[1]",
              "is_hidden": false,
              "time_limit": 500
            }
          ]
        },
        {
          "group_id": "MULTI_NODE",
          "test_cases": [
            {
              "input": "[1,2,3,4,5]",
              "expected_output": "[5,4,3,2,1]",
              "is_hidden": false,
              "time_limit": 1000
            },
            {
              "input": "[10,20,30]",
              "expected_output": "[30,20,10]",
              "is_hidden": true,
              "time_limit": 1000
            }
          ]
        }
      ]
    },
    {
      "question_id": "QMARA_003",
      "title": "Binary Search",
      "slug": "binary-search",
      "difficulty": "medium",
      "tags": ["Binary Search", "Algorithm"],
      "content": {
        "description": "Given a sorted array of integers, return the index of target element.",
        "examples": [
          {
            "input": "[-1,0,3,5,9,12], target = 9",
            "output": "4",
            "explanation": "9 exists at index 4"
          }
        ],
        "constraints": [
          "1 <= nums.length <= 10^4",
          "-10^4 <= nums[i] <= 10^4"
        ]
      },
      "code_templates": {
        "cpp": {
          "starter": "class Solution {\npublic:\n    int search(vector<int>& nums, int target) {",
          "main": "int main() {\n    vector<int> nums;\n    int target, num;\n    while (cin >> num) nums.push_back(num);\n    target = nums.back(); nums.pop_back();\n    cout << Solution().search(nums, target);\n    return 0;\n}",
          "solution": "int left = 0, right = nums.size() - 1;\nwhile (left <= right) {\n    int mid = left + (right - left) / 2;\n    if (nums[mid] == target) return mid;\n    if (nums[mid] < target) left = mid + 1;\n    else right = mid - 1;\n}\nreturn -1;"
        }
      },
      "test_case_groups": [
        {
          "group_id": "FOUND",
          "test_cases": [
            {
              "input": "[-1,0,3,5,9,12]\n9",
              "expected_output": "4",
              "is_hidden": false,
              "time_limit": 500
            },
            {
              "input": "[1,2,3,4,5]\n1",
              "expected_output": "0",
              "is_hidden": true,
              "time_limit": 500
            }
          ]
        },
        {
          "group_id": "NOT_FOUND",
          "test_cases": [
            {
              "input": "[1,3,5,7]\n2",
              "expected_output": "-1",
              "is_hidden": true,
              "time_limit": 500
            }
          ]
        }
      ]
    },
    {
      "question_id": "QMARA_004",
      "title": "Valid Parentheses",
      "slug": "valid-parentheses",
      "difficulty": "easy",
      "tags": ["Stack", "String"],
      "content": {
        "description": "Determine if the input string of brackets is valid.",
        "examples": [
          {
            "input": "\"()\"",
            "output": "true",
            "explanation": "Valid nesting"
          }
        ],
        "constraints": [
          "1 <= s.length <= 10^4"
        ]
      },
      "code_templates": {
        "python": {
          "starter": "def isValid(s):",
          "main": "if __name__ == '__main__':\n    s = input().strip()\n    print(isValid(s))",
          "solution": "stack = []\nmapping = {')': '(', '}': '{', ']': '['}\nfor char in s:\n    if char in mapping:\n        top = stack.pop() if stack else '#'\n        if mapping[char] != top:\n            return False\n    else:\n        stack.append(char)\nreturn not stack"
        }
      },
      "test_case_groups": [
        {
          "group_id": "BALANCED",
          "test_cases": [
            {
              "input": "\"()[]{}\"",
              "expected_output": "true",
              "is_hidden": false,
              "time_limit": 500
            }
          ]
        },
        {
          "group_id": "UNBALANCED",
          "test_cases": [
            {
              "input": "\"(]\"",
              "expected_output": "false",
              "is_hidden": true,
              "time_limit": 500
            },
            {
              "input": "\"([)]\"",
              "expected_output": "false",
              "is_hidden": true,
              "time_limit": 500
            }
          ]
        }
      ]
    },
    {
      "question_id": "QMARA_005",
      "title": "Merge Two Sorted Lists",
      "slug": "merge-two-sorted-lists",
      "difficulty": "easy",
      "tags": ["Linked List", "Recursion"],
      "content": {
        "description": "Merge two sorted linked lists into one sorted list.",
        "examples": [
          {
            "input": "[1,3,5]\n[2,4,6]",
            "output": "[1,2,3,4,5,6]",
            "explanation": "Merged in order"
          }
        ],
        "constraints": [
          "0 <= list lengths <= 50"
        ]
      },
      "code_templates": {
        "java": {
          "starter": "class ListNode {\n    int val;\n    ListNode next;\n    ListNode() {}\n    ListNode(int val) { this.val = val; }\n}\n\nclass Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {",
          "main": "public static ListNode buildList(int[] arr) {\n    ListNode dummy = new ListNode();\n    ListNode curr = dummy;\n    for (int num : arr) {\n        curr.next = new ListNode(num);\n        curr = curr.next;\n    }\n    return dummy.next;\n}\n\npublic static void main(String[] args) {\n    Scanner sc = new Scanner(System.in);\n    int[] arr1 = Arrays.stream(sc.nextLine().split(\",\")).mapToInt(Integer::parseInt).toArray();\n    int[] arr2 = Arrays.stream(sc.nextLine().split(\",\")).mapToInt(Integer::parseInt).toArray();\n    ListNode l1 = buildList(arr1);\n    ListNode l2 = buildList(arr2);\n    ListNode merged = new Solution().mergeTwoLists(l1, l2);\n    while (merged != null) {\n        System.out.print(merged.val + \" \");\n        merged = merged.next;\n    }\n}",
          "solution": "ListNode dummy = new ListNode();\nListNode curr = dummy;\nwhile (l1 != null && l2 != null) {\n    if (l1.val < l2.val) {\n        curr.next = l1;\n        l1 = l1.next;\n    } else {\n        curr.next = l2;\n        l2 = l2.next;\n    }\n    curr = curr.next;\n}\ncurr.next = l1 != null ? l1 : l2;\nreturn dummy.next;"
        }
      },
      "test_case_groups": [
        {
          "group_id": "EQUAL_LENGTH",
          "test_cases": [
            {
              "input": "[1,3,5]\n[2,4,6]",
              "expected_output": "[1,2,3,4,5,6]",
              "is_hidden": false,
              "time_limit": 1000
            }
          ]
        },
        {
          "group_id": "EMPTY_LIST",
          "test_cases": [
            {
              "input": "[]\n[1,2]",
              "expected_output": "[1,2]",
              "is_hidden": true,
              "time_limit": 1000
            }
          ]
        }
      ]
    }
  ]
}
